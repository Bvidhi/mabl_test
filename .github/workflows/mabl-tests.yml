name: Run all mabl tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
  # schedule:
  #   - cron: '30 0 * * *'  

jobs:
  check-schedule:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "✅ Schedule triggered"
          echo "UTC now: $(date -u)"
          echo "IST now: $(TZ=Asia/Kolkata date)"

  mabl-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: mablhq/setup-mabl-cli@v1

      - name: Ensure jq
        run: jq --version || sudo apt-get update -y && sudo apt-get install -y jq

      - name: Trigger mabl tests
        id: trigger
        run: |
          set -euo pipefail
          set +e
          mabl deployments create \
            --api-key "${{ secrets.API_KEY }}" \
            --application-id "P0JGPLSxCfMzvy27dSGseg-a" \
            --environment-id "AgZiMGbNT4tach5zIIbQbA-e" \
            --await-completion --output json > event.json 2>error.log
          exit_code=$?
          set -e
          event_id=$(jq -r '.id // empty' event.json)
          deployment_success=$(jq -r '.execution_results.success // false' event.json)
          echo "event_id=$event_id" >> "$GITHUB_OUTPUT"
          echo "deployment_success=$deployment_success" >> "$GITHUB_OUTPUT"

      - name: Fetch mabl results
        id: results
        if: steps.trigger.outputs.event_id != ''
        env:
          API_KEY: ${{ secrets.API_KEY }}
          EVENT_ID: ${{ steps.trigger.outputs.event_id }}
        run: |
          set -euo pipefail
          BASE_URL="https://api.mabl.com/execution/result/event/${EVENT_ID}"
          for i in $(seq 1 30); do
            http_code=$(curl -sS -u "key:${API_KEY}" -o results.json -w "%{http_code}" "$BASE_URL" || true)
            [[ "$http_code" == "200" ]] && break
            sleep 10
          done

          total=$(jq -r '.journey_execution_metrics.total // 0' results.json)
          failed=$(jq -r '.journey_execution_metrics.failed // 0' results.json)
          passed=$(jq -r '.journey_execution_metrics.passed // 0' results.json)
          duration=$(jq '[.executions[]? | select(.start_time and .stop_time) | (.stop_time - .start_time)] | add // 0 | floor / 1000' results.json)
          plan=$(jq -r '.executions[0]?.plan?.name // "N/A"' results.json)

          jq -r '.executions[0]?.journeys[]? | "\(.id)|\(.name)"' results.json > journey_map.txt
          all_tests=$(jq -r '.executions[].journey_executions[]?.journey_id' results.json | while read id; do grep "^$id|" journey_map.txt | cut -d"|" -f2; done | nl -w1 -s". ")
          failed_tests=$(jq -r '.executions[].journey_executions[]? | select(.success==false) | .journey_id' results.json | while read id; do grep "^$id|" journey_map.txt | cut -d"|" -f2; done | nl -w1 -s". ")

          status=$([[ "$total" -gt 0 && "$failed" -eq 0 ]] && echo "PASS ✅" || ([[ "$failed" -gt 0 ]] && echo "FAIL ❌" || echo "NO_TESTS ❌"))

          echo "status=$status" >> "$GITHUB_OUTPUT"
          echo "total_tests=$total" >> "$GITHUB_OUTPUT"
          echo "passed_tests=$passed" >> "$GITHUB_OUTPUT"
          echo "failed_tests=$failed" >> "$GITHUB_OUTPUT"
          echo "duration=$duration" >> "$GITHUB_OUTPUT"
          echo "plan_names=$plan" >> "$GITHUB_OUTPUT"
          echo "all_tests<<EOF" >> "$GITHUB_OUTPUT"; echo "$all_tests" >> "$GITHUB_OUTPUT"; echo "EOF" >> "$GITHUB_OUTPUT"
          echo "failed_tests_names<<EOF" >> "$GITHUB_OUTPUT"; echo "$failed_tests" >> "$GITHUB_OUTPUT"; echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Send teams adaptive card
        if: always()
        env:
          STATUS: ${{ steps.results.outputs.status || 'DEPLOYMENT_FAILED ❌' }}
          TOTAL: ${{ steps.results.outputs.total_tests || 0 }}
          PASSED: ${{ steps.results.outputs.passed_tests || 0 }}
          FAILED: ${{ steps.results.outputs.failed_tests || 0 }}
          DURATION: ${{ steps.results.outputs.duration || 0 }}
          PLANS: ${{ steps.results.outputs.plan_names || 'N/A' }}
          ALL_TESTS: ${{ steps.results.outputs.all_tests || 'N/A' }}
          FAILED_TESTS: ${{ steps.results.outputs.failed_tests_names || 'N/A' }}
        run: |
          set -euo pipefail
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"attachments\":[{\"contentType\":\"application/vnd.microsoft.card.adaptive\",\"content\":{\"\$schema\":\"http://adaptivecards.io/schemas/adaptive-card.json\",\"type\":\"AdaptiveCard\",\"version\":\"1.4\",\"body\":[{\"type\":\"TextBlock\",\"size\":\"Large\",\"weight\":\"Bolder\",\"text\":\"Mabl Test Results\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Plan(s): ${PLANS}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Status: ${STATUS}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Total Tests: ${TOTAL}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Passed: ${PASSED}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Failed: ${FAILED}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Duration (s): ${DURATION}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Tests:\n${ALL_TESTS}\"},{\"type\":\"TextBlock\",\"weight\":\"Bolder\",\"text\":\"Failed Tests:\n${FAILED_TESTS}\"}]}}]}" "${{ secrets.POWER_AUTOMATE_URL }}"
