name: Run all Mabl tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:
  mabl-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Trigger Mabl Plan Run
        id: trigger
        run: |
          echo "Triggering Mabl Plan Run..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.BEARER_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "plan_id": "PUT_YOUR_PLAN_ID_HERE",
              "environment_id": "JOHGzivFdBgSLdoq2kCagA-e"
            }' \
            "https://api.mabl.com/execution/run")

          run_id=$(echo "$RESPONSE" | jq -r '.id')
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Run ID not found. Exiting."
            exit 1
          fi
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      - name: Wait for Plan Run to Complete
        id: wait
        run: |
          run_id="${{ steps.trigger.outputs.run_id }}"
          echo "Waiting for run $run_id to complete..."
          for i in {1..30}; do
            STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.BEARER_TOKEN }}" \
              "https://api.mabl.com/execution/run/$run_id" | jq -r '.status')

            echo "Current status: $STATUS"
            if [ "$STATUS" == "succeeded" ] || [ "$STATUS" == "failed" ]; then
              echo "final_status=$STATUS" >> $GITHUB_OUTPUT
              break
            fi
            sleep 20
          done

      - name: Fetch Mabl Results
        id: results
        run: |
          run_id="${{ steps.trigger.outputs.run_id }}"
          echo "Fetching test results for run $run_id..."

          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.BEARER_TOKEN }}" \
            "https://api.mabl.com/results/run/$run_id")

          total_tests=$(echo "$RESPONSE" | jq '[.journeys[]] | length')
          failed_count=$(echo "$RESPONSE" | jq '[.journeys[] | select(.result != "succeeded")] | length')
          test_case_names=$(echo "$RESPONSE" | jq -r '[.journeys[].journey_name] | join(", ")')

          if [ "$failed_count" -eq 0 ] && [ "$total_tests" -gt 0 ]; then
            status="PASS ✅"
          elif [ "$total_tests" -eq 0 ]; then
            status="NO TESTS ❌"
          else
            status="FAIL ❌"
          fi

          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "test_case_names=$test_case_names" >> $GITHUB_OUTPUT

      - name: Send Teams Adaptive Card
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.4",
                  "body": [
                    { "type": "TextBlock", "size": "Large", "weight": "Bolder", "text": "Mabl Test Results" },
                    { "type": "TextBlock", "weight": "Bolder", "text": "Status: ${{ steps.results.outputs.status }}" },
                    { "type": "TextBlock", "weight": "Bolder", "text": "Total Tests: ${{ steps.results.outputs.total_tests }}" },
                    { "type": "TextBlock", "weight": "Bolder", "text": "Failed Tests: ${{ steps.results.outputs.failed_count }}" },
                    { "type": "TextBlock", "weight": "Bolder", "text": "Test Cases: ${{ steps.results.outputs.test_case_names }}" }
                  ]
                }
              }
            ]
          }' "${{ secrets.POWER_AUTOMATE_URL }}"
