name: Run all Mabl tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
  schedule:
    - cron: '45 9 * * *'

jobs:
  mabl-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install mabl CLI
        uses: mablhq/setup-mabl-cli@v1

      - name: Ensure jq is available
        run: jq --version || (sudo apt-get update -y && sudo apt-get install -y jq)

      - name: Trigger Mabl deployment (await)
        id: trigger
        run: |
          set -euo pipefail
          mabl deployments create \
            --api-key "${{ secrets.API_KEY }}" \
            --application-id "P0JGPLSxCfMzvy27dSGseg-a" \
            --environment-id "AgZiMGbNT4tach5zIIbQbA-e" \
            --await-completion \
            --output json > event.json

          event_id=$(jq -r '.id // empty' event.json)
          if [ -z "$event_id" ] || [ "$event_id" = "null" ]; then
            echo "No event id in response. Exiting."
            exit 1
          fi
          echo "event_id=$event_id" >> "$GITHUB_OUTPUT"

      - name: Fetch Mabl results
        id: results
        env:
          API_KEY: ${{ secrets.API_KEY }}
          EVENT_ID: ${{ steps.trigger.outputs.event_id }}
        run: |
          set -euo pipefail
          BASE_URL="https://api.mabl.com/execution/result/event/${EVENT_ID}"

          # Polling loop
          for attempt in $(seq 1 30); do
            http_code=$(curl -sS -u "key:${API_KEY}" -o results.json -w "%{http_code}" "$BASE_URL" || true)
            if [ "$http_code" = "200" ]; then break; fi
            sleep 10
          done

          # Initialize variable to avoid unbound error
          test_case_names=$(jq -r '
            [.executions[]?.journey_executions[]?.name // empty]
            | to_entries
            | map("\(.key+1). \(.value)")
            | join("\n")
          ' results.json || echo "")

          echo "test_case_names<<EOF" >> "$GITHUB_OUTPUT"
          echo "$test_case_names" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          # Extract test case names safely
          extracted_names=$(jq -r '
            [.executions[]?.journey_executions[]?.name // empty]
            | to_entries
            | map("\(.key+1). \(.value)")
            | join("\n")
          ' results.json || echo "")

          if [ -n "$extracted_names" ]; then
            test_case_names="$extracted_names"
          fi

          # Other metrics
          total_tests=$(jq -r '.plan_execution_metrics.total // 0' results.json)
          failed_tests=$(jq -r '.plan_execution_metrics.failed // 0' results.json)
          passed_tests=$(jq -r '.plan_execution_metrics.passed // 0' results.json)
          duration=$(jq '[.executions[]? | select(.start_time and .stop_time) | (.stop_time - .start_time)] | add // 0 | floor / 1000' results.json)
          plan_names=$(jq -r '[.executions[]?.plan?.name] | unique | join(", ") // "N/A"' results.json)

          # Status
          if [ "$total_tests" -gt 0 ] && [ "$failed_tests" -eq 0 ]; then
            status="PASS ✅"
          elif [ "$failed_tests" -gt 0 ]; then
            status="FAIL ❌"
          else
            status="NO TESTS ❌"
          fi

          # Escape for Adaptive Card JSON
          ESCAPED_TESTS=$(echo "$test_case_names" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')

          # Set outputs
          echo "status=$status" >> "$GITHUB_OUTPUT"
          echo "total_tests=$total_tests" >> "$GITHUB_OUTPUT"
          echo "passed_tests=$passed_tests" >> "$GITHUB_OUTPUT"
          echo "failed_tests=$failed_tests" >> "$GITHUB_OUTPUT"
          echo "duration=$duration" >> "$GITHUB_OUTPUT"
          echo "plan_names=$plan_names" >> "$GITHUB_OUTPUT"
          echo "test_case_names=$ESCAPED_TESTS" >> "$GITHUB_OUTPUT"

      - name: Send Teams Adaptive Card
        env:
          STATUS: ${{ steps.results.outputs.status }}
          TOTAL: ${{ steps.results.outputs.total_tests }}
          PASSED: ${{ steps.results.outputs.passed_tests }}
          FAILED: ${{ steps.results.outputs.failed_tests }}
          DURATION: ${{ steps.results.outputs.duration }}
          PLANS: ${{ steps.results.outputs.plan_names }}
          TESTS: ${{ steps.results.outputs.test_case_names }}
        run: |
          set -euo pipefail
          ESCAPED_TESTS=$(echo "${{ steps.results.outputs.test_case_names }}" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')

          curl -X POST -H "Content-Type: application/json" \
            -d "{
                  \"attachments\": [
                    {
                      \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                      \"content\": {
                        \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                        \"type\": \"AdaptiveCard\",
                        \"version\": \"1.4\",
                        \"body\": [
                          { \"type\": \"TextBlock\", \"size\": \"Large\", \"weight\": \"Bolder\", \"text\": \"Mabl Test Results\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Plan(s): ${PLANS}\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Status: ${STATUS}\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Total Tests: ${TOTAL}\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Passed: ${PASSED}\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Failed: ${FAILED}\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Duration (s): ${DURATION}\" },
                          { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Tests:\" },
                          { \"type\": \"TextBlock\", \"text\": $ESCAPED_TESTS, \"wrap\": true }
                        ]
                      }
                    }
                  ]
                }" \
            "${{ secrets.POWER_AUTOMATE_URL }}"
