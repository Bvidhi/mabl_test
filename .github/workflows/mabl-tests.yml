name: Run all Mabl tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
  schedule:
    - cron: '30 0 * * *'
    - cron: '30 12 * * *'

jobs:
  mabl-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install mabl CLI
        uses: mablhq/setup-mabl-cli@v1

      - name: Ensure jq is available
        run: jq --version || (sudo apt-get update -y && sudo apt-get install -y jq)

      # 1) Trigger deployment (capture event_id even if failed)
      - name: Trigger Mabl deployment (await)
        id: trigger
        run: |
          set -euo pipefail
          echo "Triggering Mabl deployment..."
          set +e
          mabl deployments create \
            --api-key "${{ secrets.API_KEY }}" \
            --application-id "P0JGPLSxCfMzvy27dSGseg-a" \
            --environment-id "AgZiMGbNT4tach5zIIbQbA-e" \
            --await-completion \
            --output json > event.json 2>error.log
          exit_code=$?
          set -e

          cat event.json || true
          cat error.log || true

          # Capture event_id
          event_id=$(jq -r '.id // empty' event.json)
          echo "event_id=$event_id" >> "$GITHUB_OUTPUT"

          # deployment success flag
          deployment_success=$(jq -r '.execution_results.success // false' event.json)
          echo "deployment_success=$deployment_success" >> "$GITHUB_OUTPUT"

      # 2) Fetch Mabl results (run if event_id exists)
      - name: Fetch Mabl results
        id: results
        if: steps.trigger.outputs.event_id != ''
        env:
          API_KEY: ${{ secrets.API_KEY }}
          EVENT_ID: ${{ steps.trigger.outputs.event_id }}
        run: |
          set -euo pipefail
          echo "Fetching results for deployment event: ${EVENT_ID}"

          BASE_URL="https://api.mabl.com/execution/result/event/${EVENT_ID}"

          for attempt in $(seq 1 30); do
            http_code=$(curl -sS -u "key:${API_KEY}" -o results.json -w "%{http_code}" "$BASE_URL" || true)
            echo "HTTP $http_code (attempt $attempt)"
            if [ "$http_code" = "404" ] || [ "$http_code" = "202" ] || [ "$http_code" = "204" ]; then
              echo "Results not ready, waiting..."
              sleep 10
              continue
            fi

            if [ "$http_code" != "200" ]; then
              echo "Unexpected HTTP code: $http_code"
              cat results.json || true
              sleep 10
              continue
            fi

            has_metrics=$(jq -r 'has("journey_execution_metrics")' results.json)
            if [ "$has_metrics" != "true" ]; then
              echo "Results present but metrics not ready, waiting..."
              sleep 10
              continue
            fi

            break
          done

          echo "Raw results:"
          cat results.json

          # All test names
          all_tests=$(jq -r '[.executions[]?.journey_executions[]?.journey_name] | unique | .[]' results.json | nl -w1 -s". ")
          # Failed test names
          failed_tests_names=$(jq -r '[.executions[]?.journey_executions[]? | select(.success==false) | .journey_name] | .[]' results.json | nl -w1 -s". ")

          total_tests=$(jq -r '.journey_execution_metrics.total // 0' results.json)
          failed_tests_count=$(jq -r '.journey_execution_metrics.failed // 0' results.json)
          passed_tests=$(jq -r '.journey_execution_metrics.passed // 0' results.json)
          duration=$(jq '[.executions[]? | select(.start_time and .stop_time) | (.stop_time - .start_time)] | add // 0 | floor / 1000' results.json)
          plan_names=$(jq -r '.executions[0]?.plan?.name // "N/A"' results.json)

          if [ "$total_tests" -gt 0 ] && [ "$failed_tests_count" -eq 0 ]; then
            status="PASS ✅"
          elif [ "$failed_tests_count" -gt 0 ]; then
            status="FAIL ❌"
          else
            status="NO_TESTS ❌"
          fi

          # Export outputs
          echo "status=$status" >> "$GITHUB_OUTPUT"
          echo "total_tests=$total_tests" >> "$GITHUB_OUTPUT"
          echo "passed_tests=$passed_tests" >> "$GITHUB_OUTPUT"
          echo "failed_tests=$failed_tests_count" >> "$GITHUB_OUTPUT"
          echo "duration=$duration" >> "$GITHUB_OUTPUT"
          echo "plan_names=$plan_names" >> "$GITHUB_OUTPUT"
          echo "all_tests<<EOF" >> "$GITHUB_OUTPUT"
          echo "$all_tests" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "failed_tests_names<<EOF" >> "$GITHUB_OUTPUT"
          echo "$failed_tests_names" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # 3) Send Teams Adaptive Card (always run)
      - name: Send Teams Adaptive Card
        if: always()
        env:
          STATUS: ${{ steps.results.outputs.status || 'DEPLOYMENT_FAILED ❌' }}
          TOTAL: ${{ steps.results.outputs.total_tests || 0 }}
          PASSED: ${{ steps.results.outputs.passed_tests || 0 }}
          FAILED: ${{ steps.results.outputs.failed_tests || 0 }}
          DURATION: ${{ steps.results.outputs.duration || 0 }}
          PLANS: ${{ steps.results.outputs.plan_names || 'N/A' }}
          ALL_TESTS: ${{ steps.results.outputs.all_tests || 'N/A' }}
          FAILED_TESTS: ${{ steps.results.outputs.failed_tests_names || 'N/A' }}
        run: |
          set -euo pipefail
          curl -X POST -H "Content-Type: application/json" \
            -d "{
              \"attachments\": [
                {
                  \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                  \"content\": {
                    \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                    \"type\": \"AdaptiveCard\",
                    \"version\": \"1.4\",
                    \"body\": [
                      { \"type\": \"TextBlock\", \"size\": \"Large\", \"weight\": \"Bolder\", \"text\": \"Mabl Test Results\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Plan(s): ${PLANS}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Status: ${STATUS}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Total Tests: ${TOTAL}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Passed: ${PASSED}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Failed: ${FAILED}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Duration (s): ${DURATION}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Tests:\n${ALL_TESTS}\" },
                      { \"type\": \"TextBlock\", \"weight\": \"Bolder\", \"text\": \"Failed Tests:\n${FAILED_TESTS}\" }
                    ]
                  }
                }
              ]
            }" \
            "${{ secrets.POWER_AUTOMATE_URL }}"
