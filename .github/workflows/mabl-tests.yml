name: Run all Mabl tests

on:
  push:
    branches: ["*"]       # Runs on any branch
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:
  mabl-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Mabl CLI
        uses: mablhq/setup-mabl-cli@v1

      - name: Trigger Mabl deployment
        id: trigger
        run: |
          echo "Triggering Mabl deployment for branch $GITHUB_REF_NAME..."
          mabl deployments create \
            --api-key "${{ secrets.API_KEY }}" \
            --application-id "Oonui6hTcPcWFf7v4y4exA-a" \
            --environment-id "JOHGzivFdBgSLdoq2kCagA-e" \
            --mabl-branch "${GITHUB_REF_NAME}" \
            --auto-branch true \
            --await-completion \
            --output json > deployment.json

          deployment_id=$(jq -r '.id // empty' deployment.json)
          if [ -z "$deployment_id" ]; then
            echo "deployment_id not found, exiting."
            exit 1
          fi
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT

      - name: Fetch Mabl test results
        id: results
        run: |
          echo "Fetching actual test results from Mabl API..."
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.BEARER_TOKEN }}" \
            "https://api.mabl.com/results/deployment/${{ steps.trigger.outputs.deployment_id }}/testRuns")

          # If response is empty, set default values
          if [ -z "$RESPONSE" ] || [ "$RESPONSE" = "null" ]; then
            echo "No test runs found."
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "test_case_names=none" >> $GITHUB_OUTPUT
            echo "status=NO TEST RUNS ❌" >> $GITHUB_OUTPUT
            echo "duration=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse JSON safely
          total_tests=$(echo "$RESPONSE" | jq '[.test_runs[]?] | length')
          duration=$(echo "$RESPONSE" | jq '[.test_runs[]?.duration_seconds] | add // 0')
          test_case_names=$(echo "$RESPONSE" | jq -r '[.test_runs[]?.name] | join(", ")')
          failed_count=$(echo "$RESPONSE" | jq '[.test_runs[]?.status] | map(select(.!="PASSED")) | length')
          status="PASS ✅"
          if [ "$failed_count" -gt 0 ]; then status="FAIL ❌"; fi

          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          echo "test_case_names=$test_case_names" >> $GITHUB_OUTPUT
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT

      - name: Print results to console
        run: |
          echo "Mabl Test Results:"
          echo "Status: ${{ steps.results.outputs.status }}"
          echo "Total Tests: ${{ steps.results.outputs.total_tests }}"
          echo "Duration (s): ${{ steps.results.outputs.duration }}"
          echo "Test Case Names: ${{ steps.results.outputs.test_case_names }}"

      - name: Send Teams Adaptive Card
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.4",
                  "body": [
                    { "type": "TextBlock", "size": "Large", "weight": "Bolder", "text": "Mabl Test Results" },
                    { "type": "TextBlock", "text": "Plan: Sanity Tests" },
                    { "type": "TextBlock", "text": "Status: ${{ steps.results.outputs.status }}" },
                    { "type": "FactSet", "facts": [
                        { "title": "Total Tests", "value": "${{ steps.results.outputs.total_tests }}" },
                        { "title": "Duration (s)", "value": "${{ steps.results.outputs.duration }}" },
                        { "title": "Test Case Names", "value": "${{ steps.results.outputs.test_case_names }}" }
                    ]}
                  ]
                }
              }
            ]
          }' "${{ secrets.POWER_AUTOMATE_URL }}"
